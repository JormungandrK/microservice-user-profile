// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "user-profile": Application User Types
//
// Command:
// $ goagen
// --design=github.com/JormungandrK/microservice-user-profile/design
// --out=$(GOPATH)src/github.com/JormungandrK/microservice-user-profile
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
)

// UserProfile data
type userProfilePayload struct {
	// Timestamp when was the profile created
	CreateOn *int `form:"createOn,omitempty" json:"createOn,omitempty" xml:"createOn,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Full name of the user
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Unique user id
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the userProfilePayload type instance.
func (ut *userProfilePayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// Publicize creates UserProfilePayload from userProfilePayload
func (ut *userProfilePayload) Publicize() *UserProfilePayload {
	var pub UserProfilePayload
	if ut.CreateOn != nil {
		pub.CreateOn = ut.CreateOn
	}
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.FullName != nil {
		pub.FullName = ut.FullName
	}
	if ut.UserID != nil {
		pub.UserID = ut.UserID
	}
	return &pub
}

// UserProfile data
type UserProfilePayload struct {
	// Timestamp when was the profile created
	CreateOn *int `form:"createOn,omitempty" json:"createOn,omitempty" xml:"createOn,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Full name of the user
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Unique user id
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the UserProfilePayload type instance.
func (ut *UserProfilePayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	return
}
