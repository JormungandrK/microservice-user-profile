// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user-profile": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/Microkubes/microservice-user-profile/design
// --out=$(GOPATH)/src/github.com/Microkubes/microservice-user-profile
// --version=v1.3.1

package client

import (
	"net/http"

	"github.com/keitaroinc/goa"
)

// userProfile media type (default view)
//
// Identifier: application/microkubes.user-profile+json; view=default
type UserProfile struct {
	// Company name
	Company *string `form:"company,omitempty" json:"company,omitempty" yaml:"company,omitempty" xml:"company,omitempty"`
	// Company registration number
	CompanyRegistrationNumber *string `form:"companyRegistrationNumber,omitempty" json:"companyRegistrationNumber,omitempty" yaml:"companyRegistrationNumber,omitempty" xml:"companyRegistrationNumber,omitempty"`
	// User profile created timestamp
	CreatedOn int `form:"createdOn" json:"createdOn" yaml:"createdOn" xml:"createdOn"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Full name of the user
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" yaml:"fullName,omitempty" xml:"fullName,omitempty"`
	// Tax number
	TaxNumber *string `form:"taxNumber,omitempty" json:"taxNumber,omitempty" yaml:"taxNumber,omitempty" xml:"taxNumber,omitempty"`
	// Unique user ID
	UserID string `form:"userId" json:"userId" yaml:"userId" xml:"userId"`
}

// Validate validates the UserProfile media type instance.
func (mt *UserProfile) Validate() (err error) {
	if mt.UserID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "userId"))
	}

	if mt.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *mt.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, *mt.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// DecodeUserProfile decodes the UserProfile instance encoded in resp body.
func (c *Client) DecodeUserProfile(resp *http.Response) (*UserProfile, error) {
	var decoded UserProfile
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// UserProfilePage media type (default view)
//
// Identifier: application/microkubes.user-profile-page+json; view=default
type UserProfilePage struct {
	// User profile list
	Items []*UserProfile `form:"items,omitempty" json:"items,omitempty" yaml:"items,omitempty" xml:"items,omitempty"`
	// Page number (1-based).
	Page *int `form:"page,omitempty" json:"page,omitempty" yaml:"page,omitempty" xml:"page,omitempty"`
	// Items per page.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty" yaml:"pageSize,omitempty" xml:"pageSize,omitempty"`
}

// Validate validates the UserProfilePage media type instance.
func (mt *UserProfilePage) Validate() (err error) {
	for _, e := range mt.Items {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserProfilePage decodes the UserProfilePage instance encoded in resp body.
func (c *Client) DecodeUserProfilePage(resp *http.Response) (*UserProfilePage, error) {
	var decoded UserProfilePage
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
